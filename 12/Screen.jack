// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color; // true black false white

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;

        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        let value[x & 15] = color;
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, temp, diff;

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;

        if(dy = 0) {
            do Screen.DrawHLine(x1, x2, y1);
        }
        else {
            if(dx = 0) {
                do Screen.DrawVLine(x1, y1, y2);
            }
            else {
                while(~(a > dx) & ~(b > dy)) {
                    do Screen.drawPixel(x1 + a, y1 + b);

                    if(diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
        }
        return;
    }

    function DrawHLine(int x1, int x2, int y) {
        var int temp;

        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        while(~(x2 < x1)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    function DrawVLine(int x, int y1, int y2) {
        var int temp;

        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while(~(y2 < y1)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)) {
            do Screen.DrawHLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int rSquared;
        let dy = -r;
        let rSquared = r*r;
        while(~(dy > r)) {
            let dx = Math.sqrt(rSquared - (dy*dy));
            do Screen.DrawHLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
